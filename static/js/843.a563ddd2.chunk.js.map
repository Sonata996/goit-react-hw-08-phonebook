{"version":3,"file":"static/js/843.a563ddd2.chunk.js","mappings":"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","sources":["components/InputName/InputName.styled.js","components/InputName/InputName.jsx","components/Contacts/contacts.styled.js","components/Contacts/Contacts.jsx","components/InputFilter/inputFilter.styled.js","components/InputFilter/InputFilter.jsx","components/App/App.styled.js","pages/ContactPage/Conatct.styled.js","pages/ContactPage/ContactsPage.js"],"sourcesContent":["import styled from 'styled-components'\n\n\n// export const Form = styled.form`\n// max-width: 300px;\n// display: flex;\n// flex-direction: column;\n// border: 1px solid black;\n// padding: 15px;\n// gap: 20px;\n// margin-bottom: 40px;\n// `\nexport const ConteinerLabel = styled.div`\ndisplay: flex;\nflex-direction: column;\nmax-width: 300px;\n`\nexport const FormButton = styled.button`\nmax-width: 80px;\n`","import React from 'react';\nimport { Formik, Field, Form} from 'formik';\nimport * as Yup from 'yup';\nimport { ConteinerLabel,FormButton } from './InputName.styled';\nimport { useDispatch, useSelector} from 'react-redux';\nimport { servicePostContact } from 'serviceApi/serviceApi';\nimport { getContact } from 'redux/tasks/selectors';\n\nconst newContact ={\n  name:'',\n  number: ''\n}\n\nconst userSchema  = Yup.object().shape({\n  number: Yup.string()\n  .trim()\n  .required('This field is required!')\n  .matches(/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n  'Phone number must be digits')\n  ,\n  name: Yup.string()\n  .trim()\n  .required('This field is required!')\n})\nexport const InputName = ({onCangeName}) =>{\n  const disPatch = useDispatch()\n  const contacts = useSelector(getContact)\n    return (\n        <Formik\n        initialValues={{\n            name: '',\n            number: ''\n          \n        }}\n        validationSchema={userSchema}\n\n        onSubmit={(value, action) => {\n          const similarityContact = contacts.filter(elem =>  elem.name.toLowerCase() === value.name.toLowerCase())\n          if (similarityContact.length === 0) {\n            newContact.name = value.name\n            newContact.number = value.number\n            disPatch(servicePostContact(newContact))\n            \n        } else{\n            alert(`${value.name} is already in contacts`)\n        }\n            action.resetForm()\n        }}\n        \n        pattern='/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/'\n      >\n        {({ errors, touched }) => (\n        <Form>\n\n          <ConteinerLabel>\n            <label htmlFor=\"name\">Name</label>\n            <Field id=\"name\" name=\"name\" placeholder=\"Enter a name\" />\n            {errors.name && touched.name ? (\n               <div>{errors.name}</div>\n            ) : null}\n          </ConteinerLabel> \n\n          <ConteinerLabel>\n            <label htmlFor=\"number\">Number</label>\n            <Field type=\"tel\" name=\"number\" />\n            {errors.number && touched.number ? (\n              <div>{errors.number}</div>\n            ) : null}\n          </ConteinerLabel>\n\n          <FormButton type=\"submit\">Submit</FormButton>\n        </Form>\n         )} \n      </Formik>\n    )\n}","import styled from 'styled-components'\n\n\n\n\nexport const ConteineInfo = styled.div`\ndisplay: flex;\nborder: 1px solid black;\ngap: 5px;\n`\n\nexport const ConteinerContacts = styled.div`\npadding: 15px;\n`\nexport const ContactList = styled.ul`\ndisplay: flex;\nflex-wrap: wrap;\npadding: 15px;\nlist-style: none;\npadding: 0;\nmargin: 0;\nborder: 1px solid black;\n`\nexport const ElemList = styled.li`\nwidth: 350px;\nheight: 60px;\nmargin-left:15px ;\ndisplay: flex;\nalign-items: center;\ngap: 20px;\n`\nexport const DeletButton = styled.button`\nmax-height: 20px;\n`","import { useDispatch} from \"react-redux\"\nimport {ContactList,ElemList,DeletButton, ConteineInfo } from \"./contacts.styled\"\nimport { useSelector } from \"react-redux\";\nimport { FaUser } from \"react-icons/fa\";\nimport { getContact, getFilter } from \"redux/tasks/selectors\";\nimport { serviceDeletContact } from \"serviceApi/serviceApi\";\n\n\nexport const Contacts = () =>{\nconst contacts =useSelector(getContact)\nconst filter = useSelector(getFilter);\nconst contactsList =contacts.filter(elem => elem && elem.name.toLowerCase().includes(filter))\n\n\n    const disPatch = useDispatch()\n    return(\n        <div>\n            <ContactList> \n               {contactsList.map(elem => <ElemList key={elem.id}>\n                \n                <ConteineInfo>\n                    <FaUser size='3em'/>\n                    <p>\n                        {elem.name}: \n                    </p>\n                    <p>\n                        {elem.number}\n                    </p>\n                </ConteineInfo>\n                <DeletButton\n                    id={elem.id}\n\n                onClick={()=>{\n                    disPatch(serviceDeletContact(elem.id))\n                }}\n                >\n                    Delete</DeletButton>\n               </ElemList>\n                )}\n            </ContactList>\n        </div>\n    )\n}","import styled from 'styled-components'\n\n\nexport const ConteinerFilter = styled.div`\ndisplay: flex;\nflex-direction: column;\ngap: 8px;\nmargin-bottom: 20px;\n`\nexport const InputFilterStyled = styled.input`\nmax-width: 250px;\n`","// import { filter } from \"redux/addContact\"\nimport { query } from \"redux/tasks/filter\"\nimport { ConteinerFilter,InputFilterStyled } from \"./inputFilter.styled\"\nimport { useDispatch} from \"react-redux\"\n\n\nexport const InputFilter = ({tilteInput,onAddFilter}) =>{\n    // const listContacts =useSelector(state =>state.contacts.contacts)\n    const disPatch = useDispatch()\n    return (\n        <ConteinerFilter>\n                <label htmlFor=\"filters\">{tilteInput}</label>\n                <InputFilterStyled \n                    // value={listContacts}\n                    name='filters'\n                    type=\"text\" \n                    onChange={(value)=> disPatch(query(value.currentTarget.value))}//disPatch(filter(value.target.value))\n                    \n                    />\n            </ConteinerFilter>\n    )\n}","\nimport styled from 'styled-components'\n\nexport const ConteinerLoader = styled.div`\nposition: fixed;\ntop: 30px;\nleft: 50%;\ntransform: translateX(-50%);\n`\n","import styled from 'styled-components'\n\nexport const ConteinetContact= styled.div`\nmargin-left:15px ;\nmargin-right: 15px;\n`\n\nexport const Title = styled.h1`\nmargin-top: 0;\nmax-width: 200px;\nmargin-left: auto;\nmargin-right: auto;\n`","import { useDispatch, useSelector } from \"react-redux\";\nimport { serviceGetContactsApi } from \"serviceApi/serviceApi\";\nimport { getError } from \"redux/tasks/selectors\"; \nimport Notiflix from 'notiflix';\nimport { InputName } from \"components/InputName/InputName\"; \nimport { Contacts } from \"components/Contacts/Contacts\";\nimport { InputFilter } from \"components/InputFilter/InputFilter\";\nimport { ConteinerLoader } from \"components/App/App.styled\"; \nimport { Loader } from \"components/Loader/Loader\"; \nimport { ConteinetContact, Title } from \"./Conatct.styled\";\n\n\n\nexport default function ContactPage(){\nconst error = useSelector(getError)\nconst disPatch = useDispatch()\n\ndisPatch(serviceGetContactsApi())\n\nreturn(\n    <ConteinetContact>\n        <Title>Phonebook</Title>\n\n         <InputName \n         />\n        \n        <h2>Contacts</h2>\n        \n         <InputFilter \n            tilteInput=\"Find contacts by name\"\n        /> \n\n        <Contacts />\n\n        <ConteinerLoader>\n             <Loader/>\n         </ConteinerLoader>\n\n        {error && \n            Notiflix.Notify.failure(error)\n        }\n    </ConteinetContact>\n)\n}"],"names":["ConteinerLabel","styled","_templateObject","_taggedTemplateLiteral","FormButton","_templateObject2","newContact","name","number","userSchema","Yup","shape","trim","required","matches","InputName","_ref","onCangeName","disPatch","useDispatch","contacts","useSelector","getContact","_jsx","Formik","initialValues","validationSchema","onSubmit","value","action","filter","elem","toLowerCase","length","servicePostContact","alert","concat","resetForm","pattern","children","_ref2","errors","touched","_jsxs","Form","htmlFor","Field","id","placeholder","type","ConteineInfo","ContactList","_templateObject3","ElemList","_templateObject4","DeletButton","_templateObject5","Contacts","getFilter","contactsList","includes","map","FaUser","size","onClick","serviceDeletContact","ConteinerFilter","InputFilterStyled","InputFilter","tilteInput","onAddFilter","onChange","query","currentTarget","ConteinerLoader","ConteinetContact","Title","ContactPage","error","getError","serviceGetContactsApi","Loader","Notiflix"],"sourceRoot":""}