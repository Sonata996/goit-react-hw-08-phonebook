{"version":3,"file":"static/js/843.7fa25671.chunk.js","mappings":"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","sources":["components/InputName/InputName.styled.js","components/InputName/InputName.jsx","components/Contacts/contacts.styled.js","components/Contacts/Contacts.jsx","components/InputFilter/inputFilter.styled.js","components/InputFilter/InputFilter.jsx","components/App/App.styled.js","pages/ContactPage/Conatct.styled.js","pages/ContactPage/ContactsPage.js"],"sourcesContent":["import styled from 'styled-components'\r\n\r\n\r\n// export const Form = styled.form`\r\n// max-width: 300px;\r\n// display: flex;\r\n// flex-direction: column;\r\n// border: 1px solid black;\r\n// padding: 15px;\r\n// gap: 20px;\r\n// margin-bottom: 40px;\r\n// `\r\nexport const ConteinerLabel = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\nmax-width: 300px;\r\n`\r\nexport const FormButton = styled.button`\r\nmax-width: 80px;\r\n`","import React from 'react';\r\nimport { Formik, Field, Form} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Notiflix from 'notiflix';\r\nimport { ConteinerLabel,FormButton } from './InputName.styled';\r\nimport { useDispatch, useSelector} from 'react-redux';\r\nimport { servicePostContact } from 'serviceApi/serviceApi';\r\nimport { getContact } from 'redux/tasks/selectors';\r\n\r\nconst newContact ={\r\n  name:'',\r\n  number: ''\r\n}\r\n\r\nconst userSchema  = Yup.object().shape({\r\n  number: Yup.string()\r\n  .trim()\r\n  .required('This field is required!')\r\n  .matches(/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\r\n  'Phone number must be digits')\r\n  ,\r\n  name: Yup.string()\r\n  .trim()\r\n  .required('This field is required!')\r\n})\r\nexport const InputName = ({onCangeName}) =>{\r\n  const disPatch = useDispatch()\r\n  const contacts = useSelector(getContact)\r\n    return (\r\n        <Formik\r\n        initialValues={{\r\n            name: '',\r\n            number: ''\r\n          \r\n        }}\r\n        validationSchema={userSchema}\r\n\r\n        onSubmit={(value, action) => {\r\n          const similarityContact = contacts.filter(elem =>  elem.name.toLowerCase() === value.name.toLowerCase())\r\n          if (similarityContact.length === 0) {\r\n            newContact.name = value.name\r\n            newContact.number = value.number\r\n            disPatch(servicePostContact(newContact))\r\n            \r\n        } else{\r\n          Notiflix.Notify.info(`${value.name} is already in contacts`);\r\n        }\r\n            action.resetForm()\r\n        }}\r\n        \r\n        pattern='/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/'\r\n      >\r\n        {({ errors, touched }) => (\r\n        <Form>\r\n\r\n          <ConteinerLabel>\r\n            <label htmlFor=\"name\">Name</label>\r\n            <Field id=\"name\" name=\"name\" placeholder=\"Enter a name\" />\r\n            {errors.name && touched.name ? (\r\n               <div>{errors.name}</div>\r\n            ) : null}\r\n          </ConteinerLabel> \r\n\r\n          <ConteinerLabel>\r\n            <label htmlFor=\"number\">Number</label>\r\n            <Field type=\"tel\" name=\"number\" />\r\n            {errors.number && touched.number ? (\r\n              <div>{errors.number}</div>\r\n            ) : null}\r\n          </ConteinerLabel>\r\n\r\n          <FormButton type=\"submit\">Submit</FormButton>\r\n        </Form>\r\n         )} \r\n      </Formik>\r\n    )\r\n}","import styled from 'styled-components'\r\n\r\n\r\n\r\n\r\nexport const ConteineInfo = styled.div`\r\ndisplay: flex;\r\nborder: 1px solid black;\r\ngap: 5px;\r\n`\r\n\r\nexport const ConteinerContacts = styled.div`\r\npadding: 15px;\r\n`\r\nexport const ContactList = styled.ul`\r\ndisplay: flex;\r\nflex-wrap: wrap;\r\npadding: 15px;\r\nlist-style: none;\r\npadding: 0;\r\nmargin: 0;\r\nborder: 1px solid black;\r\n`\r\nexport const ElemList = styled.li`\r\nwidth: 350px;\r\nheight: 60px;\r\nmargin-left:15px ;\r\ndisplay: flex;\r\nalign-items: center;\r\ngap: 20px;\r\n`\r\nexport const DeletButton = styled.button`\r\nmax-height: 20px;\r\n`","import { useDispatch} from \"react-redux\"\r\nimport {ContactList,ElemList,DeletButton, ConteineInfo } from \"./contacts.styled\"\r\nimport { useSelector } from \"react-redux\";\r\nimport { FaUser } from \"react-icons/fa\";\r\nimport { getContact, getFilter } from \"redux/tasks/selectors\";\r\nimport { serviceDeletContact } from \"serviceApi/serviceApi\";\r\n\r\n\r\nexport const Contacts = () =>{\r\nconst contacts =useSelector(getContact)\r\nconst filter = useSelector(getFilter);\r\nconst contactsList =contacts.filter(elem => elem && elem.name.toLowerCase().includes(filter))\r\n\r\n\r\n    const disPatch = useDispatch()\r\n    return(\r\n        <div>\r\n            <ContactList> \r\n               {contactsList.map(elem => <ElemList key={elem.id}>\r\n                \r\n                <ConteineInfo>\r\n                    <FaUser size='3em'/>\r\n                    <p>\r\n                        {elem.name}: \r\n                    </p>\r\n                    <p>\r\n                        {elem.number}\r\n                    </p>\r\n                </ConteineInfo>\r\n                <DeletButton\r\n                    id={elem.id}\r\n\r\n                onClick={()=>{\r\n                    disPatch(serviceDeletContact(elem.id))\r\n                }}\r\n                >\r\n                    Delete</DeletButton>\r\n               </ElemList>\r\n                )}\r\n            </ContactList>\r\n        </div>\r\n    )\r\n}","import styled from 'styled-components'\r\n\r\n\r\nexport const ConteinerFilter = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\ngap: 8px;\r\nmargin-bottom: 20px;\r\n`\r\nexport const InputFilterStyled = styled.input`\r\nmax-width: 250px;\r\n`","// import { filter } from \"redux/addContact\"\r\nimport { query } from \"redux/tasks/filter\"\r\nimport { ConteinerFilter,InputFilterStyled } from \"./inputFilter.styled\"\r\nimport { useDispatch} from \"react-redux\"\r\n\r\n\r\nexport const InputFilter = ({tilteInput,onAddFilter}) =>{\r\n    // const listContacts =useSelector(state =>state.contacts.contacts)\r\n    const disPatch = useDispatch()\r\n    return (\r\n        <ConteinerFilter>\r\n                <label htmlFor=\"filters\">{tilteInput}</label>\r\n                <InputFilterStyled \r\n                    // value={listContacts}\r\n                    name='filters'\r\n                    type=\"text\" \r\n                    onChange={(value)=> disPatch(query(value.currentTarget.value))}//disPatch(filter(value.target.value))\r\n                    \r\n                    />\r\n            </ConteinerFilter>\r\n    )\r\n}","\r\nimport styled from 'styled-components'\r\n\r\nexport const ConteinerLoader = styled.div`\r\nposition: fixed;\r\ntop: 30px;\r\nleft: 50%;\r\ntransform: translateX(-50%);\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport const ConteinetContact= styled.div`\r\nmargin-left:15px ;\r\nmargin-right: 15px;\r\n`\r\n\r\nexport const Title = styled.h1`\r\nmargin-top: 0;\r\nmax-width: 200px;\r\nmargin-left: auto;\r\nmargin-right: auto;\r\n`","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { serviceGetContactsApi } from \"serviceApi/serviceApi\";\r\nimport { getError } from \"redux/tasks/selectors\"; \r\nimport Notiflix from 'notiflix';\r\nimport { InputName } from \"components/InputName/InputName\"; \r\nimport { Contacts } from \"components/Contacts/Contacts\";\r\nimport { InputFilter } from \"components/InputFilter/InputFilter\";\r\nimport { ConteinerLoader } from \"components/App/App.styled\"; \r\nimport { Loader } from \"components/Loader/Loader\"; \r\nimport { ConteinetContact, Title } from \"./Conatct.styled\";\r\n// import { useLocation} from \"react-router-dom\";\r\n\r\n\r\n\r\nexport default function ContactPage(){\r\nconst error = useSelector(getError)\r\nconst disPatch = useDispatch()\r\n// const location= useLocation();\r\n\r\n\r\ndisPatch(serviceGetContactsApi())\r\n\r\nreturn(\r\n    <ConteinetContact>\r\n        <Title>Phonebook</Title>\r\n\r\n         <InputName \r\n         />\r\n        \r\n        <h2>Contacts</h2>\r\n        \r\n         <InputFilter \r\n            tilteInput=\"Find contacts by name\"\r\n        /> \r\n\r\n        <Contacts />\r\n\r\n        <ConteinerLoader>\r\n             <Loader/>\r\n         </ConteinerLoader>\r\n\r\n        {error && \r\n            Notiflix.Notify.failure(error)\r\n        }\r\n    </ConteinetContact>\r\n)\r\n}"],"names":["ConteinerLabel","styled","_templateObject","_taggedTemplateLiteral","FormButton","_templateObject2","newContact","name","number","userSchema","Yup","shape","trim","required","matches","InputName","_ref","onCangeName","disPatch","useDispatch","contacts","useSelector","getContact","_jsx","Formik","initialValues","validationSchema","onSubmit","value","action","filter","elem","toLowerCase","length","servicePostContact","Notiflix","concat","resetForm","pattern","children","_ref2","errors","touched","_jsxs","Form","htmlFor","Field","id","placeholder","type","ConteineInfo","ContactList","_templateObject3","ElemList","_templateObject4","DeletButton","_templateObject5","Contacts","getFilter","contactsList","includes","map","FaUser","size","onClick","serviceDeletContact","ConteinerFilter","InputFilterStyled","InputFilter","tilteInput","onAddFilter","onChange","query","currentTarget","ConteinerLoader","ConteinetContact","Title","ContactPage","error","getError","serviceGetContactsApi","Loader"],"sourceRoot":""}