{"version":3,"file":"static/js/843.9c870753.chunk.js","mappings":"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","sources":["components/InputName/InputName.styled.js","components/InputName/InputName.jsx","components/Contacts/contacts.styled.js","components/Contacts/Contacts.jsx","components/InputFilter/inputFilter.styled.js","components/InputFilter/InputFilter.jsx","components/App/App.styled.js","pages/ContactPage/Conatct.styled.js","pages/ContactPage/ContactsPage.js"],"sourcesContent":["import styled from 'styled-components'\n\n\n// export const Form = styled.form`\n// max-width: 300px;\n// display: flex;\n// flex-direction: column;\n// border: 1px solid black;\n// padding: 15px;\n// gap: 20px;\n// margin-bottom: 40px;\n// `\nexport const ConteinerLabel = styled.div`\ndisplay: flex;\nflex-direction: column;\nmax-width: 300px;\n`\nexport const FormButton = styled.button`\nmax-width: 80px;\n`","import React from 'react';\nimport { Formik, Field, Form } from 'formik';\nimport * as Yup from 'yup';\nimport Notiflix from 'notiflix';\nimport { ConteinerLabel, FormButton } from './InputName.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { servicePostContact } from 'serviceApi/serviceApi';\nimport { getContact } from 'redux/tasks/selectors';\n\nconst newContact = {\n  name: '',\n  phone: '',\n};\n\nconst userSchema = Yup.object().shape({\n  phone: Yup.string()\n    .trim()\n    .required('This field is required!')\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits'\n    ),\n  name: Yup.string().trim().required('This field is required!'),\n});\nexport const InputName = ({ onCangeName }) => {\n  const disPatch = useDispatch();\n  const contacts = useSelector(getContact);\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        phone: '',\n      }}\n      validationSchema={userSchema}\n      onSubmit={(value, action) => {\n        const similarityContact = contacts.filter(\n          elem => elem.name.toLowerCase() === value.name.toLowerCase()\n        );\n        if (similarityContact.length === 0) {\n          newContact.name = value.name;\n          newContact.phone = value.phone;\n          disPatch(servicePostContact(newContact));\n        } else {\n          Notiflix.Notify.info(`${value.name} is already in contacts`);\n        }\n        action.resetForm();\n      }}\n      pattern=\"/\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/\"\n    >\n      {({ errors, touched }) => (\n        <Form>\n          <ConteinerLabel>\n            <label htmlFor=\"name\">Name</label>\n            <Field id=\"name\" name=\"name\" placeholder=\"Enter a name\" />\n            {errors.name && touched.name ? <div>{errors.name}</div> : null}\n          </ConteinerLabel>\n\n          <ConteinerLabel>\n            <label htmlFor=\"phone\">Number</label>\n            <Field type=\"tel\" name=\"phone\" />\n            {errors.phone && touched.phone ? <div>{errors.phone}</div> : null}\n          </ConteinerLabel>\n\n          <FormButton type=\"submit\">Submit</FormButton>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ConteineInfo = styled.div`\n  display: flex;\n  gap: 5px;\n  align-items: center;\n`;\n\nexport const ConteinerContacts = styled.div`\n  padding: 15px;\n`;\nexport const ContactList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 15px;\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  /* border: 1px solid black; */\n`;\nexport const ElemList = styled.li`\n  position: relative;\n  width: 350px;\n  /* height: 60px; */\n  margin-left: 15px;\n  display: flex;\n  padding: 5px;\n  gap: 20px;\n`;\nexport const BorderIcon = styled.div`\n  border: 1px solid black;\n  padding: 5px;\n  border-radius: 50%;\n`;\n\nexport const DeletButton = styled.button`\n  max-height: 20px;\n  position: absolute;\n  top: 0;\n  right: 5px;\n`;\n","import { useDispatch } from 'react-redux';\nimport {\n  ContactList,\n  ElemList,\n  DeletButton,\n  ConteineInfo,\n  BorderIcon,\n} from './contacts.styled';\nimport { useSelector } from 'react-redux';\nimport { FaUser } from 'react-icons/fa';\nimport { getContact, getFilter } from 'redux/tasks/selectors';\nimport {\n  serviceDeletContact,\n  serviceGetContactsApi,\n} from 'serviceApi/serviceApi';\n\nexport const Contacts = () => {\n  const contacts = useSelector(getContact);\n  const filter = useSelector(getFilter);\n  const contactsList = contacts.filter(\n    elem => elem && elem.name.toLowerCase().includes(filter)\n  );\n\n  const disPatch = useDispatch();\n  return (\n    <ContactList>\n      {contactsList.map(elem => (\n        <ElemList key={elem._id}>\n          <ConteineInfo>\n            <BorderIcon>\n              <FaUser size=\"40px\" />\n            </BorderIcon>\n\n            <p>{elem.name}:</p>\n            <p>{elem.phone}</p>\n          </ConteineInfo>\n          <DeletButton\n            onClick={() => {\n              console.log(elem);\n              disPatch(serviceDeletContact(elem._id));\n              disPatch(serviceGetContactsApi());\n            }}\n          >\n            Delete\n          </DeletButton>\n        </ElemList>\n      ))}\n    </ContactList>\n  );\n};\n","import styled from 'styled-components'\n\n\nexport const ConteinerFilter = styled.div`\ndisplay: flex;\nflex-direction: column;\ngap: 8px;\nmargin-bottom: 20px;\n`\nexport const InputFilterStyled = styled.input`\nmax-width: 250px;\n`","// import { filter } from \"redux/addContact\"\nimport { query } from \"redux/tasks/filter\"\nimport { ConteinerFilter,InputFilterStyled } from \"./inputFilter.styled\"\nimport { useDispatch} from \"react-redux\"\n\n\nexport const InputFilter = ({tilteInput,onAddFilter}) =>{\n    // const listContacts =useSelector(state =>state.contacts.contacts)\n    const disPatch = useDispatch()\n    return (\n        <ConteinerFilter>\n                <label htmlFor=\"filters\">{tilteInput}</label>\n                <InputFilterStyled \n                    // value={listContacts}\n                    name='filters'\n                    type=\"text\" \n                    onChange={(value)=> disPatch(query(value.currentTarget.value))}//disPatch(filter(value.target.value))\n                    \n                    />\n            </ConteinerFilter>\n    )\n}","\nimport styled from 'styled-components'\n\nexport const ConteinerLoader = styled.div`\nposition: fixed;\ntop: 30px;\nleft: 50%;\ntransform: translateX(-50%);\n`\n","import styled from 'styled-components'\n\nexport const ConteinetContact= styled.div`\nmargin-left:15px ;\nmargin-right: 15px;\n`\n\nexport const Title = styled.h1`\nmargin-top: 0;\nmax-width: 200px;\nmargin-left: auto;\nmargin-right: auto;\n`","import { useDispatch, useSelector } from \"react-redux\";\nimport { serviceGetContactsApi } from \"serviceApi/serviceApi\";\nimport { getError } from \"redux/tasks/selectors\"; \nimport Notiflix from 'notiflix';\nimport { InputName } from \"components/InputName/InputName\"; \nimport { Contacts } from \"components/Contacts/Contacts\";\nimport { InputFilter } from \"components/InputFilter/InputFilter\";\nimport { ConteinerLoader } from \"components/App/App.styled\"; \nimport { Loader } from \"components/Loader/Loader\"; \nimport { ConteinetContact, Title } from \"./Conatct.styled\";\n// import { useLocation} from \"react-router-dom\";\n\n\n\nexport default function ContactPage(){\nconst error = useSelector(getError)\nconst disPatch = useDispatch()\n// const location= useLocation();\n\n\ndisPatch(serviceGetContactsApi())\n\nreturn(\n    <ConteinetContact>\n        <Title>Phonebook</Title>\n\n         <InputName \n         />\n        \n        <h2>Contacts</h2>\n        \n         <InputFilter \n            tilteInput=\"Find contacts by name\"\n        /> \n\n        <Contacts />\n\n        <ConteinerLoader>\n             <Loader/>\n         </ConteinerLoader>\n\n        {error && \n            Notiflix.Notify.failure(error)\n        }\n    </ConteinetContact>\n)\n}"],"names":["ConteinerLabel","styled","_templateObject","_taggedTemplateLiteral","FormButton","_templateObject2","newContact","name","phone","userSchema","Yup","shape","trim","required","matches","InputName","_ref","onCangeName","disPatch","useDispatch","contacts","useSelector","getContact","_jsx","Formik","initialValues","validationSchema","onSubmit","value","action","filter","elem","toLowerCase","length","servicePostContact","Notiflix","concat","resetForm","pattern","children","_ref2","errors","touched","_jsxs","Form","htmlFor","Field","id","placeholder","type","ConteineInfo","ContactList","_templateObject3","ElemList","_templateObject4","BorderIcon","_templateObject5","DeletButton","_templateObject6","Contacts","getFilter","contactsList","includes","map","FaUser","size","onClick","console","log","serviceDeletContact","_id","serviceGetContactsApi","ConteinerFilter","InputFilterStyled","InputFilter","tilteInput","onAddFilter","onChange","query","currentTarget","ConteinerLoader","ConteinetContact","Title","ContactPage","error","getError","Loader"],"sourceRoot":""}